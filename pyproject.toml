[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "lemmata"
description = "batteries-included LLM framework to jumpstart your next project"
authors = [
    {name = "Alex Bondarenko", email = "abondarenko101@gmail.com"}
]
license = {text = "MPL-2.0"}
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "langchain>=0.0.198",
    "regex-llm>=0.1.0",
    "pathspec>=0.11.1",
]
dynamic = ["version"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3"
]

[project.urls]
Repository = "https://github.com/abondrn/lemmata"
Homepage = "https://github.com/abondrn/lemmata"

[project.optional-dependencies]
openai = [
    "openai>=0.27.8",
    "tiktoken>=0.4.0",
]
ui = [
    "gradio",
    "rich>=13.4.1",
    "halo>=0.0.31",
    "langchain-visualizer>=0.0.25",
]
tools = [
    "llama-index>=0.6.23",
    "duckduckgo-search>=3.8.3",
    "arxiv>=1.4.7",
    "wikipedia>=1.4.0",
    "gradio-tools>=0.0.9",
    "snscrape",
    "platypush>=0.24.4",
    "docarray>=0.33.0",
    "plugnplai>=0.0.5",
]
stt = [
    "PyAudio>=0.2.13",
    "SpeechRecognition>=3.10.0",
]
[tool.pdm.version]
source = "scm"

[tool.pdm.build]
package-dir = "src"

[tool.pdm.dev-dependencies]
test = [
    "pytest>=6.1",
]
dev = [
    "towncrier>=19.2",
    "parver>=0.3",
    "pre-commit>=3.3.2",
]

doc = [
    "mkdocs>=1.1",
    "mkdocs-material>=6.2",
]

[tool.pdm.scripts]
lemmata = { call = "src.lemmata.cli:main" }
gradio = "gradio src/lemmata/cli.py"
release = "python -m tasks.release"
test = "pytest tests/"
doc = {shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview"}
lint = "pre-commit run"
relint = {shell = "git add -u && pre-commit run"}
lint-all = "pre-commit run --all-files"
install = {shell = "pdm install && pre-commit install"}

[tool.black]
line-length = 130
target-version = ["py37", "py38", "py39", "py310"]

[tool.ruff]
line-length = 130
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  "F",    # pyflakes
  "PGH",  # pygrep-hooks
  "RUF",  # ruff
  "W",    # pycodestyle
  "YTT",  # flake8-2020
  "I001",  # isort
]
extend-ignore = ["B018", "B019"]
src = ["src"]
extend-exclude = ["tests/fixtures"]
target-version = "py37"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["lemmata"]
force-sort-within-sections = true

[tool.mypy]
follow_imports = "silent"
ignore_missing_imports = true
disallow_incomplete_defs = true
namespace_packages = true
mypy_path = "src"
explicit_package_bases = true
disable_error_code = "no-redef,import,var-annotated"
warn_unused_ignores = true
warn_no_return = true
allow_redefinition = true

[tool.towncrier]
package = "lemmata"
filename = "CHANGELOG.md"
issue_format = "[#{issue}](https://github.com/abondrn/lemmata/issues/{issue})"
directory = "news/"
start_string = "<!-- insertion marker -->"
title_format = "[v{version}](https://github.com/abondrn/lemmata/releases/tag/{version}) ({project_date})"
template = "news/towncrier_template.md"
underlines = "-~^"

[[tool.towncrier.type]]
directory = "feature"
name = "Features & Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "dep"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals and Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellany"
showcontent = true

[tool.isort]
profile = "black"
atomic = true
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = ["lemmata"]
float_to_top = true

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning"
]
